/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import control.PersistenciaJPA;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Agendamento;
import model.Servico;
import model.StatusAgendamento;

/**
 *
 * @author Igor
 */
public class AgendamentoJF extends javax.swing.JFrame {
        
    // Variáveis de controle 
    private PersistenciaJPA jpa;
    private DefaultTableModel tableModel;
  
   public AgendamentoJF() {
        this.jpa = new PersistenciaJPA();
        initComponents();
        configurarTabela(); //para prepara a tabela
        carregarTabela();  
    }
   
      // configurar a estrutura da tabela
    private void configurarTabela() {
        String[] colunas = {"ID", "Data/Hora", "Cliente", "Barbeiro", "Serviços", "Valor Total", "Status"};
        tableModel = new DefaultTableModel(colunas, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; 
            }
        };
        tblAgendamentos.setModel(tableModel); 
    }
     //carregar os dados do banco na tabela
    private void carregarTabela() {
        tableModel.setRowCount(0); // Limpa a tabela
        try {
            List<Agendamento> agendamentos = jpa.getEntityManager()
                    .createQuery("SELECT a FROM Agendamento a ORDER BY a.dataHora DESC", Agendamento.class)
                    .getResultList();

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");

            for (Agendamento a : agendamentos) {
                // Junta os nomes dos serviços 
                String servicosStr = a.getServicos().stream()
                                      .map(Servico::getNome)
                                      .collect(Collectors.joining(", "));

                tableModel.addRow(new Object[]{
                    a.getId(),
                    a.getDataHora().format(formatter),
                    a.getCliente().getNome(),
                    a.getBarbeiro().getNome(),
                    servicosStr,
                    String.format("R$ %.2f", a.getValorTotal()),
                    a.getStatus()
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar agendamentos: " + e.getMessage());
            e.printStackTrace();
        }
    }
   
    
    private void cancelarAgendamentoSelecionado() {
        int selectedRow = tblAgendamentos.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um agendamento na tabela para cancelar.");
            return;
        }

        if (JOptionPane.showConfirmDialog(this, "Tem certeza que deseja cancelar este agendamento?") == JOptionPane.YES_OPTION) {
            try {
                Long agendamentoId = (Long) tblAgendamentos.getValueAt(selectedRow, 0);
                Agendamento agendamento = (Agendamento) jpa.find(Agendamento.class, agendamentoId);

                if (agendamento != null) {
                    if (agendamento.getStatus() == StatusAgendamento.CONCLUIDO || agendamento.getStatus() == StatusAgendamento.CANCELADO) {
                        JOptionPane.showMessageDialog(this, "Não é possível cancelar um agendamento já finalizado ou cancelado.");
                        return;
                    }
                    agendamento.setStatus(StatusAgendamento.CANCELADO); // Muda o status
                    jpa.persist(agendamento); // Salva a alteração
                    
                    JOptionPane.showMessageDialog(this, "Agendamento cancelado com sucesso!");
                    carregarTabela(); // Atualiza a tabela
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro ao cancelar agendamento: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }
    
    private void abrirDialogoNovoAgendamento() {
      
    CadastroAgendamentoJD dialog = new CadastroAgendamentoJD(this, true, jpa);
    dialog.setVisible(true);

    // Depois fechado atualiza a tabela 
    carregarTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnNovo = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        lblTitulo = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAgendamentos = new javax.swing.JTable();
        btnCancelar1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnNovo.setText("Novo Agendamento");
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar Agendamento");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarcancelarAgendamentoSelecionado(evt);
            }
        });

        lblTitulo.setText("Gerenciamento de Clientes ");

        tblAgendamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nome", "email"
            }
        ));
        jScrollPane2.setViewportView(tblAgendamentos);

        btnCancelar1.setText("Excluir Agendamentos");
        btnCancelar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelar1cancelarAgendamentoSelecionado(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(lblTitulo))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(btnNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnCancelar1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(lblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNovo)
                    .addComponent(btnCancelar)
                    .addComponent(btnCancelar1))
                .addGap(37, 37, 37))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
         abrirDialogoNovoAgendamento();
    }//GEN-LAST:event_btnNovoActionPerformed

    private void btnCancelarcancelarAgendamentoSelecionado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarcancelarAgendamentoSelecionado
         cancelarAgendamentoSelecionado();
    }//GEN-LAST:event_btnCancelarcancelarAgendamentoSelecionado

    private void btnCancelar1cancelarAgendamentoSelecionado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelar1cancelarAgendamentoSelecionado
       int selectedRow = tblAgendamentos.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Selecione um agendamento na tabela para excluir.", "Aviso", JOptionPane.WARNING_MESSAGE);
        return;
    }

   
    int confirm = JOptionPane.showConfirmDialog(
        this,
        "Esta ação é PERMANENTE e não pode ser desfeita.\nTem certeza que deseja EXCLUIR este agendamento?",
        "Confirmar Exclusão Definitiva",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE // Adiciona um ícone de aviso
    );

    if (confirm == JOptionPane.YES_OPTION) {
        try {
            Long agendamentoId = (Long) tblAgendamentos.getValueAt(selectedRow, 0);
            Agendamento agendamento = (Agendamento) jpa.find(Agendamento.class, agendamentoId);

            if (agendamento != null) {
                jpa.remover(agendamento); 
                JOptionPane.showMessageDialog(this, "Agendamento excluído com sucesso!");
                carregarTabela(); 
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao excluir agendamento: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_btnCancelar1cancelarAgendamentoSelecionado

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCancelar1;
    private javax.swing.JButton btnNovo;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTable tblAgendamentos;
    // End of variables declaration//GEN-END:variables
}
