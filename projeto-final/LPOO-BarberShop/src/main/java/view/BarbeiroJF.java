/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import control.PersistenciaJPA;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Barbeiro;

/**
 *
 * @author Igor
 */
public class BarbeiroJF extends javax.swing.JFrame {
    
    
    private PersistenciaJPA jpa;
    private DefaultTableModel tableModel;
    /**
     * Creates new form NewJFrame
     */
    public BarbeiroJF() {
        this.jpa = new PersistenciaJPA();
        initComponents();
        configurarTabela();
        carregarTabela();
    }

    
    private void configurarTabela() {
        // Adiciona a coluna Especialidades
        String[] colunas = {"ID", "Nome", "Email", "Telefone", "Especialidades"};
        tableModel = new DefaultTableModel(colunas, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tblBarbeiros.setModel(tableModel);
    }

    private void carregarTabela() {
        tableModel.setRowCount(0);
        try {
            //  busca por Barbeiros
            List<Barbeiro> barbeiros = jpa.getEntityManager()
                    .createQuery("SELECT b FROM Barbeiro b ORDER BY b.nome ASC", Barbeiro.class)
                    .getResultList();
            
            for (Barbeiro barbeiro : barbeiros) {
                Vector<Object> row = new Vector<>();
                row.add(barbeiro.getId());
                row.add(barbeiro.getNome());
                row.add(barbeiro.getEmail());
                row.add(barbeiro.getTelefone());
                row.add(barbeiro.getEspecialidades()); 
                tableModel.addRow(row);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar barbeiros: " + e.getMessage());
        }
    }

     private void abrirDialogoCadastro(Barbeiro barbeiro) {
     
        CadastroBarbeiroJD dialog = new CadastroBarbeiroJD(this, true, jpa);
       
        if (barbeiro != null) {
            dialog.setBarbeiro(barbeiro);
        }
        dialog.setVisible(true);
        carregarTabela(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        btnNovo = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnRemover = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblBarbeiros = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitulo.setText("Gerenciamento de Clientes ");

        btnNovo.setText("Novo");
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarBarbeiroSelecionado(evt);
            }
        });

        btnRemover.setText("Remover");
        btnRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBarbeiroSelecionado(evt);
            }
        });

        tblBarbeiros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nome", "email"
            }
        ));
        jScrollPane2.setViewportView(tblBarbeiros);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblTitulo)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btnRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(lblTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNovo)
                    .addComponent(btnEditar)
                    .addComponent(btnRemover))
                .addGap(52, 52, 52))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editarBarbeiroSelecionado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarBarbeiroSelecionado
         int selectedRow = tblBarbeiros.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um barbeiro para editar.");
            return;
        }
        Long barbeiroId = (Long) tblBarbeiros.getValueAt(selectedRow, 0);
        try {
            Barbeiro barbeiro = (Barbeiro) jpa.find(Barbeiro.class, barbeiroId);
            if (barbeiro != null) {
                abrirDialogoCadastro(barbeiro);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao buscar barbeiro: " + e.getMessage());
        }
    }//GEN-LAST:event_editarBarbeiroSelecionado

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        abrirDialogoCadastro(null);
    }//GEN-LAST:event_btnNovoActionPerformed

    private void removerBarbeiroSelecionado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBarbeiroSelecionado
          int selectedRow = tblBarbeiros.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um barbeiro para remover.");
            return;
        }

        if (JOptionPane.showConfirmDialog(this, "Tem certeza?") == JOptionPane.YES_OPTION) {
            try {
                Long barbeiroId = (Long) tblBarbeiros.getValueAt(selectedRow, 0);
                Barbeiro barbeiro = (Barbeiro) jpa.find(Barbeiro.class, barbeiroId);
                if (barbeiro != null) {
                    jpa.remover(barbeiro);
                    JOptionPane.showMessageDialog(this, "Barbeiro removido com sucesso!");
                    carregarTabela();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro ao remover barbeiro: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_removerBarbeiroSelecionado


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnNovo;
    private javax.swing.JButton btnRemover;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTable tblBarbeiros;
    // End of variables declaration//GEN-END:variables
}
